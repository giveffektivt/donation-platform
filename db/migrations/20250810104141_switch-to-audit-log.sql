-- migrate:up
create table audit_log (
    id bigint generated by default as identity primary key,
    table_name text not null,
    record_id text,
    operation text not null,
    changed_at timestamptz not null default now(),
    changed_by text not null default current_user,
    txid bigint not null default txid_current(),
    data jsonb not null
);

create index on audit_log (table_name);

create index on audit_log (record_id);

create index on audit_log (changed_at);

create index on audit_log using GIN (data);

grant
select
    on audit_log to reader_sensitive;

grant insert on audit_log to writer;

create or replace function record_audit_log () returns trigger language plpgsql as $$
begin
  if tg_op = 'UPDATE' and 
     (to_jsonb(new) - 'updated_at') is not distinct from (to_jsonb(old) - 'updated_at')
  then
    return new;
  end if;

  insert into audit_log(table_name, record_id, operation, data)
  values (
    tg_table_name,
    coalesce(new.id, old.id),
    tg_op,
    case when tg_op = 'DELETE' then to_jsonb(old) else to_jsonb(new) end
  );

  return case when tg_op = 'DELETE' then old else new end;
end;
$$;

-- obsolete now, use tables directly
drop view charge,
charge_with_gateway_info,
donation,
donation_with_contact_info,
donation_with_sensitive_info,
donor,
donor_with_contact_info,
donor_with_sensitive_info,
fundraiser,
fundraiser_activity_checkin,
gavebrev,
gavebrev_checkin,
skat,
skat_gaveskema,
transfer,
old_ids_map cascade;

-- obsolete soft-delete cascade rules
drop rule donor_soft_delete_cascade on _donor;

drop rule donation_soft_delete_cascade on _donation;

drop rule donor_soft_delete_cascade_gavebrev on _donor;

drop rule donor_soft_delete_cascade_gavebrev_checkin on _donor;

/* sql-formatter-disable */
alter table _charge rename to charge;
alter table _donation rename to donation;
alter table _donor rename to donor;
alter table _fundraiser rename to fundraiser;
alter table _fundraiser_activity_checkin rename to fundraiser_activity_checkin;
alter table _gavebrev rename to gavebrev;
alter table _gavebrev_checkin rename to gavebrev_checkin;
alter table _skat rename to skat;
alter table _skat_gaveskema rename to skat_gaveskema;
alter table _transfer rename to transfer;

insert into audit_log (table_name, record_id, operation, data, changed_at)
select 'charge', id, case when deleted_at is null then 'IMPORT' else 'IMPORT_DELETED' end, to_jsonb(charge), updated_at from charge;

insert into audit_log (table_name, record_id, operation, data, changed_at)
select 'donation', id, case when deleted_at is null then 'IMPORT' else 'IMPORT_DELETED' end, to_jsonb(donation), updated_at from donation;

insert into audit_log (table_name, record_id, operation, data, changed_at)
select 'donor', id, case when deleted_at is null then 'IMPORT' else 'IMPORT_DELETED' end, to_jsonb(donor), updated_at from donor;

insert into audit_log (table_name, record_id, operation, data, changed_at)
select 'fundraiser', id, case when deleted_at is null then 'IMPORT' else 'IMPORT_DELETED' end, to_jsonb(fundraiser), updated_at from fundraiser;

insert into audit_log (table_name, record_id, operation, data, changed_at)
select 'fundraiser_activity_checkin', id, case when deleted_at is null then 'IMPORT' else 'IMPORT_DELETED' end, to_jsonb(fundraiser_activity_checkin), updated_at from fundraiser_activity_checkin;

insert into audit_log (table_name, record_id, operation, data, changed_at)
select 'gavebrev', id, case when deleted_at is null then 'IMPORT' else 'IMPORT_DELETED' end, to_jsonb(gavebrev), updated_at from gavebrev;

insert into audit_log (table_name, record_id, operation, data, changed_at)
select 'gavebrev_checkin', id, case when deleted_at is null then 'IMPORT' else 'IMPORT_DELETED' end, to_jsonb(gavebrev_checkin), updated_at from gavebrev_checkin;

insert into audit_log (table_name, record_id, operation, data, changed_at)
select 'skat', id, case when deleted_at is null then 'IMPORT' else 'IMPORT_DELETED' end, to_jsonb(skat), updated_at from skat;

insert into audit_log (table_name, record_id, operation, data, changed_at)
select 'skat_gaveskema', id, case when deleted_at is null then 'IMPORT' else 'IMPORT_DELETED' end, to_jsonb(skat_gaveskema), updated_at from skat_gaveskema;

insert into audit_log (table_name, record_id, operation, data, changed_at)
select 'transfer', id, case when deleted_at is null then 'IMPORT' else 'IMPORT_DELETED' end, to_jsonb(transfer), updated_at from transfer;

delete from charge where deleted_at is not null;
delete from donation where deleted_at is not null;
delete from donor where deleted_at is not null;
delete from fundraiser where deleted_at is not null;
delete from fundraiser_activity_checkin where deleted_at is not null;
delete from gavebrev where deleted_at is not null;
delete from gavebrev_checkin where deleted_at is not null;
delete from skat where deleted_at is not null;
delete from skat_gaveskema where deleted_at is not null;
delete from transfer where deleted_at is not null;

alter table charge drop column deleted_at;
alter table donation drop column deleted_at;
alter table donor drop column deleted_at;
alter table fundraiser drop column deleted_at;
alter table fundraiser_activity_checkin drop column deleted_at;
alter table gavebrev drop column deleted_at;
alter table gavebrev_checkin drop column deleted_at;
alter table skat drop column deleted_at;
alter table skat_gaveskema drop column deleted_at;
alter table transfer drop column deleted_at;

create trigger trigger_audit_log_charge after insert or update or delete on charge for each row execute function record_audit_log();
create trigger trigger_audit_log_donation after insert or update or delete on donation for each row execute function record_audit_log();
create trigger trigger_audit_log_donor after insert or update or delete on donor for each row execute function record_audit_log();
create trigger trigger_audit_log_fundraiser after insert or update or delete on fundraiser for each row execute function record_audit_log();
create trigger trigger_audit_log_fundraiser_activity_checkin after insert or update or delete on fundraiser_activity_checkin for each row execute function record_audit_log();
create trigger trigger_audit_log_gavebrev after insert or update or delete on gavebrev for each row execute function record_audit_log();
create trigger trigger_audit_log_gavebrev_checkin after insert or update or delete on gavebrev_checkin for each row execute function record_audit_log();
create trigger trigger_audit_log_skat after insert or update or delete on skat for each row execute function record_audit_log();
create trigger trigger_audit_log_skat_gaveskema after insert or update or delete on skat_gaveskema for each row execute function record_audit_log();
create trigger trigger_audit_log_transfer after insert or update or delete on transfer for each row execute function record_audit_log();

grant select on charge to reader_sensitive;
grant insert, update, delete on charge to writer;

grant select on donation to reader_sensitive;
grant insert, update, delete on donation to writer;

grant select on donor to reader_sensitive;
grant insert, update, delete on donor to writer;

grant select on fundraiser to reader_contact;
grant insert, update, delete on fundraiser to writer;

grant select on fundraiser_activity_checkin to reader;
grant insert, update, delete on fundraiser_activity_checkin to writer;

grant select on gavebrev to reader_sensitive;
grant insert, update, delete on gavebrev to writer;

grant select on gavebrev_checkin to reader_sensitive;
grant insert, update, delete on gavebrev_checkin to writer;

grant select on skat to reader_sensitive;
grant insert, update, delete on skat to writer;

grant select on skat_gaveskema to reader_sensitive;
grant insert, update, delete on skat_gaveskema to writer;

grant select on transfer to everyone;
grant insert, update, delete on transfer to writer;

/* sql-formatter-enable */;

alter table giveffektivt.charge
alter column short_id
set default giveffektivt.gen_short_id ('charge', 'short_id', 'c-');

-- migrate:down
